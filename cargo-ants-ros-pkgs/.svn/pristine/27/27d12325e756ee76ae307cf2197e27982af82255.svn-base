#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='wolf_ros'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level         Description                                    Default   Min   Max
gen.add("segment_window_length",  double_t,   0,                            "Window length in line fitting m",             0.5,      0.1,  400 )
gen.add("min_window_points",      int_t,      0,                            "Min N points in line fitting",                5,        2,    400 )
gen.add("new_frame_elapsed_time", double_t,   0,                            "Time for create a new frame",                 10,       1e-9, 100 )
gen.add("theta_min",              double_t,   0,                            "Angle min for consider corner",               0.8,      0.0,  3.14)
gen.add("k_sigmas_ut",            double_t,   0,                            "Max error in sigmas",                         1,        0.0,  10  )
gen.add("concatenate_ii_ut",      int_t,      0,                            "Max distance in beams for contatenate lines", 5,        0,    100 )
gen.add("concatenate_angle_ut",   double_t,   0,                            "Angle max for consider parallel, concatenate",0.5,      0.0,  1.0 )
gen.add("max_distance",           double_t,   0,                            "Max distance in m",                           1,        0.0,  100 )
gen.add("jump_dist_ut",           double_t,   0,                            "Upper threshold for jumps m",                 1,        0.0,  100 )
gen.add("jump_angle_ut",          double_t,   0,                            "Upper threshold for jumps rad",               2.5,        0.0,  3.14)
gen.add("draw_lines",             bool_t,     0,                            "Draw lines in rviz",                          False               )

exit(gen.generate(PACKAGE, "WolfAlgorithm", "Wolf"))
