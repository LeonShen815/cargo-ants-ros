#include "local_map_node.h"

LocalMapNode::LocalMapNode() :
    nh_(ros::this_node::getName()), 
    grid_(30,20,0.5,0.5,30,10)
{
    //set desired loop rate
    rate_ = 10.0; //Hz
    
    //set verbose at false
    verbose_ = true;

    //allocate the grid_ object. 
    //TODO: get params from nh_.getParam() ... Edit .cfg + .yaml files
    //Grid2D *grid_ = new Grid2D(10,10,0.5,0.5,10,5,20);
    grid_.print(); 
    
    //set up subscribers with callbacks
    odometry_subscriber_ = nh_.subscribe("odometry", 100, &LocalMapNode::odometryCallback, this);
    front_laser_subscriber_ = nh_.subscribe("front_laser", 1, &LocalMapNode::laserCallback, this);
    
    //advertise publishers
    grid_publisher_ = nh_.advertise<nav_msgs::OccupancyGrid>("grid_map", 100);
    marker_publisher_ = nh_.advertise<visualization_msgs::MarkerArray>("markers", 100);
}

LocalMapNode::~LocalMapNode()
{
    //free memory 
    //delete grid_;
}

double LocalMapNode::getRate() const
{
    return rate_;
}

void LocalMapNode::process()
{
	//update with all odometry data received since the last iteration
    if ( verbose_ ) std::cout << "process(): call to odometryUpdate()" << std::endl;
	grid_.odometryUpdate();
	
    //update with lidar hits
    if ( verbose_ )std::cout << "process(): call to lidarUpdate()" << std::endl;
    grid_.lidarUpdate();

    //clustering over the grid
    if ( verbose_ ) std::cout << "process(): call to computeClusters()" << std::endl;
    grid_.computeClusters();
    
    if ( verbose_ ) std::cout << std::endl;
    if ( verbose_ ) grid_.printClusters(); 
}

void LocalMapNode::publish()
{
    //fill marker message
    marker_msg_.markers.clear();
    marker_msg_.markers.resize( grid_.cluster_set_.size() );
    
    for (unsigned int ii=0; ii<grid_.cluster_set_.size(); ii++ )
    {
        marker_msg_.markers[ii].header.frame_id = "agv_base_link";
        marker_msg_.markers[ii].header.stamp = ros::Time::now();
        marker_msg_.markers[ii].id = ii;
        marker_msg_.markers[ii].type = visualization_msgs::Marker::CUBE;
        marker_msg_.markers[ii].action = visualization_msgs::Marker::ADD;
        marker_msg_.markers[ii].pose.position.x = grid_.cluster_set_.at(ii).centroid_x_;
        marker_msg_.markers[ii].pose.position.y = grid_.cluster_set_.at(ii).centroid_y_;
        marker_msg_.markers[ii].pose.position.z = 0.;
        marker_msg_.markers[ii].scale.x = 0.5;
        marker_msg_.markers[ii].scale.y = 0.5;
        marker_msg_.markers[ii].scale.z = 0.5;
        marker_msg_.markers[ii].color.a = 1.;
        marker_msg_.markers[ii].color.r = 1.;
        marker_msg_.markers[ii].color.g = 0.2;
        marker_msg_.markers[ii].color.b = 0.2;
        marker_msg_.markers[ii].lifetime = ros::Duration(0.1);   
    }
    
    //fill grid message header, info and data
    grid_msg_.header.stamp = ros::Time::now(); 
    grid_msg_.header.frame_id = "agv_base_link";
    grid_msg_.info.resolution = grid_.getGridStep();
    grid_msg_.info.width = grid_.getNx();
    grid_msg_.info.height = grid_.getNy();
    grid_msg_.info.origin.position.x = grid_.getXmax()-grid_.getSizeX();
    grid_msg_.info.origin.position.y = grid_.getYmax()-grid_.getSizeY();
    grid_msg_.info.origin.position.z = 0.;
    grid_msg_.info.origin.orientation.x = 0.;
    grid_msg_.info.origin.orientation.y = 0.;
    grid_msg_.info.origin.orientation.z = 0.;
    grid_msg_.info.origin.orientation.w = 1.;
    grid_.getGrid(grid_msg_.data);
    
    //publish
    marker_publisher_.publish(marker_msg_);
    grid_publisher_.publish(grid_msg_);
}

void LocalMapNode::odometryCallback(const nav_msgs::Odometry::ConstPtr& _msg)
{
	//reset odometry array
	grid_.odometry_.clear(); 
	
    // CASE TWIST. Preferred case, but "TNO-october14" rosbag does not provide twist ...
	//get dt = msg->header.stamp - last_stamp; 
	//last_stamp = msg->header.stamp;
	//gird.odometry_.push_back(Eigen::Vector4d(_msg->twist.twist.linear.x, _msg->twist.twist.linear.y, _msg->twist.twist.angular.z, dt));
    //grid_.odometryUpdate(_msg->twist.twist.linear.x, _msg->twist.twist.linear.y, _msg->twist.twist.angular.z, dt); 
    
    // CASE RELATIVE ODOM (2D case. TNO-october14 dataset provides data in this way). Set 1s as integ. time
	grid_.odometry_.push_back(Eigen::Vector4d(_msg->pose.pose.position.x, _msg->pose.pose.position.y, _msg->twist.twist.angular.z, 1));
    //grid_.odometryUpdate(_msg->pose.pose.position.x, _msg->pose.pose.position.y, _msg->twist.twist.angular.z, 1);
}

void LocalMapNode::laserCallback(const sensor_msgs::LaserScan::ConstPtr& _msg)
{
    unsigned int ii = 0; //iterator over raw scan
    unsigned int ii_ok = 0; //counter of correct hits
    double azimuth = _msg->angle_min; //ray azimuth. Init to angle_min value (azimuth of the first ray)
    
    //Resize and Reset lidar points. Keep only the current scan
    //grid_.lidar_points_.setZero(2,_msg->ranges.size());
    grid_.lidar_points_.resize(2,_msg->ranges.size());
    
    //filter out bad scan points (NaN, out of range) and convert to xy
    for ( ii = 0; ii<_msg->ranges.size(); ii++ )
    {
        //check data integrity
        if ( (_msg->ranges[ii]>_msg->range_min) && (_msg->ranges[ii]<_msg->range_max) && !isnan(_msg->ranges[ii]) && !isinf(_msg->ranges[ii]) )
        //if ( (_msg->ranges[ii]>0.5) && (_msg->ranges[ii]<50) && !isnan(_msg->ranges[ii]) && !isinf(_msg->ranges[ii]) )
        {
            //transform to euclidean
            grid_.lidar_points_(0,ii_ok) = (double)_msg->ranges[ii]*cos(azimuth);
            grid_.lidar_points_(1,ii_ok) = (double)_msg->ranges[ii]*sin(azimuth);
            
            //apply device mounting point calibration. TODO: use full 6DoF calibration from urdf !!!
            grid_.lidar_points_(0,ii_ok) +=3.5; //Laser advanced 3.5m forward wrt base_link (TNO dataset)
            
            //count as a valid hit
            ii_ok ++;
        }
        
        //update azimuth
        azimuth += _msg->angle_increment; 
    }
    
    //resize points matrix
    grid_.lidar_points_.conservativeResize(2,ii_ok);
}
